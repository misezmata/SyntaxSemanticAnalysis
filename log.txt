Line 1: type_specifier : INT

int

Line 1: func_declaration : type_specifier ID LPAREN RPAREN SEMICOLON

int main();


Line 1: unit : func_declaration

int main();


Line 1: program : unit

int main();


Line 2: type_specifier : INT

int

Line 2: func_declaration : type_specifier ID LPAREN RPAREN SEMICOLON

int foo();


Line 2: unit : func_declaration

int foo();


Line 2: program : program unit

int main();
int foo();


Line 4: type_specifier : INT

int

Line 5: type_specifier : INT

int

Line 5: declaration_list : ID

a

Line 5: declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD

a,ara[10]

Line 5: var_declaration : type_specifier declaration_list SEMICOLON

int a,ara[10];

Line 5: statement : var_declaration

int a,ara[10];


Line 5: statements : statement

int a,ara[10];


Line 6: factor : CONST_INT

9

Line 6: unary_expression : factor

9

Line 6: term : unary_expression

9

Line 6: simple_expression : term

9

Line 6: rel_expression : simple_expression

9

Line 6: logic_expression : rel_expression

9

Line 6: expression : logic_expression

9

Line 6: variable : ID LTHIRD expression RTHIRD

ara[9]

Line 6: factor : CONST_INT

10

Line 6: unary_expression : factor

10

Line 6: term : unary_expression

10

Line 6: simple_expression : term

10

Line 6: rel_expression : simple_expression

10

Line 6: logic_expression : rel_expression

10

Line 6: expression : variable ASSIGNOP logic_expression

ara[9]=10

Line 6: expression_statement : expression SEMICOLON

ara[9]=10;

Line 6: statement : expression_statement

ara[9]=10;


Line 6: statements : statements statement

int a,ara[10];
ara[9]=10;


Line 7: factor : CONST_INT

9

Line 7: unary_expression : factor

9

Line 7: term : unary_expression

9

Line 7: simple_expression : term

9

Line 7: factor : CONST_INT

0

Line 7: unary_expression : factor

0

Line 7: term : unary_expression

0

Line 7: simple_expression : term

0

Line 7: rel_expression : simple_expression

0

Line 7: logic_expression : rel_expression

0

Line 7: expression : logic_expression

0

Line 7: variable : ID LTHIRD expression RTHIRD

ara[0]

Line 7: factor : variable

ara[0]

Line 7: unary_expression : factor

ara[0]

Line 7: term : unary_expression

ara[0]

Line 7: simple_expression : simple_expression ADDOP term

9+ara[0]

Line 7: factor : CONST_INT

9

Line 7: unary_expression : factor

9

Line 7: term : unary_expression

9

Line 7: simple_expression : term

9



Line 7: factor : ID LPAREN argument_list RPAREN

foo()

Line 7: unary_expression : factor

foo()

Line 7: term : unary_expression

foo()

Line 7: simple_expression : simple_expression ADDOP term

9+foo()

Line 7: rel_expression : simple_expression RELOP simple_expression

9+ara[0]<9+foo()

Line 7: logic_expression : rel_expression

9+ara[0]<9+foo()

Line 7: expression : logic_expression

9+ara[0]<9+foo()

Line 7: statement : RETURN expression SEMICOLON

return 9+ara[0]<9+foo();


Line 7: statements : statements statement

int a,ara[10];
ara[9]=10;
return 9+ara[0]<9+foo();


Line 8: compound_statement : LCURL statements RCURL

{
int a,ara[10];
ara[9]=10;
return 9+ara[0]<9+foo();
}




ScopeTable # 1.3
3 --> < ara , ID > 
6 --> < a , ID > 



ScopeTable # 1
4 --> < foo , ID > 
6 --> < main , ID > 


Line 8: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a,ara[10];
ara[9]=10;
return 9+ara[0]<9+foo();
}


Line 8: unit : func_definition

int main(){
int a,ara[10];
ara[9]=10;
return 9+ara[0]<9+foo();
}



Line 8: program : program unit

int main();
int foo();
int main(){
int a,ara[10];
ara[9]=10;
return 9+ara[0]<9+foo();
}



Line 8: start : program



ScopeTable # 1
4 --> < foo , ID > 
6 --> < main , ID > 


Total lines: 8
Total errors: 0

